# OASIS_START
# DO NOT EDIT (digest: 6a6bc8dcbd388fa3d9a6bd180ae7c8b3)
# Ignore VCS directories, you can use the same kind of rule outside
# OASIS_START/STOP if you want to exclude directories that contains
# useless stuff for the build process
true: annot, bin_annot
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library httpaf
"lib/httpaf.cmxs": use_httpaf
"lib/body.cmx": for-pack(Httpaf)
"lib/connection.cmx": for-pack(Httpaf)
"lib/headers.cmx": for-pack(Httpaf)
"lib/iOVec.cmx": for-pack(Httpaf)
"lib/method.cmx": for-pack(Httpaf)
"lib/request.cmx": for-pack(Httpaf)
"lib/response.cmx": for-pack(Httpaf)
"lib/status.cmx": for-pack(Httpaf)
"lib/version.cmx": for-pack(Httpaf)
"lib/bigstring.cmx": for-pack(Httpaf)
"lib/message.cmx": for-pack(Httpaf)
"lib/parse.cmx": for-pack(Httpaf)
"lib/serialize.cmx": for-pack(Httpaf)
<lib/httpaf.{cma,cmxa}>: oasis_library_httpaf_native
<lib/*.ml{,i,y}>: oasis_library_httpaf_native
<lib/*.ml{,i,y}>: pkg_angstrom
<lib/*.ml{,i,y}>: pkg_faraday
<lib/*.ml{,i,y}>: pkg_result
# Library httpaf_async
"async/httpaf_async.cmxs": use_httpaf_async
<async/httpaf_async.{cma,cmxa}>: oasis_library_httpaf_async_native
<async/*.ml{,i,y}>: oasis_library_httpaf_async_native
<async/*.ml{,i,y}>: pkg_angstrom
<async/*.ml{,i,y}>: pkg_async
<async/*.ml{,i,y}>: pkg_core
<async/*.ml{,i,y}>: pkg_faraday
<async/*.ml{,i,y}>: pkg_faraday.async
<async/*.ml{,i,y}>: pkg_result
<async/*.ml{,i,y}>: pkg_threads
<async/*.ml{,i,y}>: use_httpaf
# Executable wrk_async_benchmark
<benchmarks/wrk_async_benchmark.{native,byte}>: oasis_executable_wrk_async_benchmark_native
<benchmarks/*.ml{,i,y}>: oasis_executable_wrk_async_benchmark_native
<benchmarks/wrk_async_benchmark.{native,byte}>: pkg_angstrom
<benchmarks/wrk_async_benchmark.{native,byte}>: pkg_async
<benchmarks/wrk_async_benchmark.{native,byte}>: pkg_core
<benchmarks/wrk_async_benchmark.{native,byte}>: pkg_faraday
<benchmarks/wrk_async_benchmark.{native,byte}>: pkg_faraday.async
<benchmarks/wrk_async_benchmark.{native,byte}>: pkg_result
<benchmarks/wrk_async_benchmark.{native,byte}>: pkg_threads
<benchmarks/wrk_async_benchmark.{native,byte}>: use_httpaf
<benchmarks/wrk_async_benchmark.{native,byte}>: use_httpaf_async
<benchmarks/*.ml{,i,y}>: pkg_angstrom
<benchmarks/*.ml{,i,y}>: pkg_async
<benchmarks/*.ml{,i,y}>: pkg_core
<benchmarks/*.ml{,i,y}>: pkg_faraday
<benchmarks/*.ml{,i,y}>: pkg_faraday.async
<benchmarks/*.ml{,i,y}>: pkg_result
<benchmarks/*.ml{,i,y}>: pkg_threads
<benchmarks/*.ml{,i,y}>: use_httpaf
<benchmarks/*.ml{,i,y}>: use_httpaf_async
# Executable test_angstrom
<lib_test/test_httpaf.{native,byte}>: pkg_angstrom
<lib_test/test_httpaf.{native,byte}>: pkg_faraday
<lib_test/test_httpaf.{native,byte}>: pkg_result
<lib_test/test_httpaf.{native,byte}>: use_httpaf
<lib_test/*.ml{,i,y}>: pkg_angstrom
<lib_test/*.ml{,i,y}>: pkg_faraday
<lib_test/*.ml{,i,y}>: pkg_result
<lib_test/*.ml{,i,y}>: use_httpaf
# OASIS_STOP
